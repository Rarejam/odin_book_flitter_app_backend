// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id Int @id @default(autoincrement())
username String 
email String @unique
password String
profileImage String?
profileImagePublicId String? 
bio String?
createdAt DateTime @default(now())

//posts
posts Post[]

//comments
comments Comment[]

// follows
followers Follows[] @relation("user_followers")
following Follows[] @relation("user_following")

// reshares
 resharedPosts          ResharedPost[]
  resharedComments       ResharedComment[]

  //likes
  postLikes    PostLike[]
  commentLikes CommentLike[]

    //private messages
    
sentMessages      PrivateMessage[] @relation("SentMessages")
receivedMessages  PrivateMessage[] @relation("ReceivedMessages")
}
model ResharedPost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model ResharedComment {
  id         Int      @id @default(autoincrement())
  userId     Int
  commentId  Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])

}


model Post{
  id Int @id @default(autoincrement())
  content String?
  postImage String?
  imagePublicId  String?   // <-- store Cloudinary public_id here
  createdAt DateTime @default(now())

  // relations

  //user that made the post
  authorId Int
  author User @relation(fields: [authorId],references: [id])
  //many comments under a post
  comments Comment[]

//reshares
   reshares    ResharedPost[] 

    // likes
   likes    PostLike[]
}

model Comment {
id Int @id @default(autoincrement())
content String
createdAt DateTime @default(now())

//post being commented on
postId Int
post Post @relation(fields: [postId],references: [id])

//user who commented 
authorId Int
author User @relation(fields: [authorId],references: [id])

//reshare
 reshares    ResharedComment[] 

 // likes
 likes CommentLike[]
}

model Follows {
id Int @id @default(autoincrement())

followerId Int
followingId Int

follower    User @relation("user_following", fields: [followerId], references: [id])
following   User @relation("user_followers", fields: [followingId], references: [id])

@@unique([followerId,followingId]) //to prevent duplicate follows probably from the same user
}

model PostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId]) // prevent double-likes
}

model CommentLike {
  id         Int      @id @default(autoincrement())
  commentId  Int
  userId     Int
  createdAt  DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}
model PrivateMessage{
  id Int @id @default(autoincrement())
  content String
   chatImage  String?   
   imagePublicId String?
  senderId Int
  receiverId Int
  date DateTime @default(now())
  // use double quotes for @relation() namings
  sender User @relation("SentMessages",fields: [senderId],references: [id])
receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}